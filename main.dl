#include "types.dl"

unify(a, a) :- unify_expr(_, a).  // includes all allocations via `malloc`

unify(a, b) :-
  unify_expr(e, a),
  unify_expr(e, b),
  ord(a) <= ord(b).

unify(b, c) :-
  unify_ptr(a, b),
  unify_ptr(a, c),
  ord(b) <= ord(c).

unify(a, b) <=
  unify(c, b) :-
    ord(c) < ord(a).

unify_expr(e, a) :- constant_points_to(e, a).
unify_ptr(a, b) :- constant_ptr_points_to(a, b).
unify_expr(v, a) :- allocated_at(a, v).

expr_points_to_choice(e, a) :- unify_expr(e, a).
ptr_points_to_choice(e, a) :- unify_ptr(e, a).

// assign
unify_expr(v, a) :-
  assign_instruction(v, e),
  expr_points_to_choice(e, a).

// load
unify_expr(e, b) :-
  load_instruction_address(i, u),
  instruction_assigns_to(i, e),
  expr_points_to_choice(u, a),
  unify(r, a), unify(r, a1), // all unified allocation of a
  ptr_points_to_choice(a1, b).

// store
unify_ptr(a, b) :-
  store_instruction_address(i, v),
  store_instruction_value(i, u),
  expr_points_to_choice(v, a),
  expr_points_to_choice(u, b).

// field (insensitive)
unify_ptr(e, a) :-
  alloc_subregion_root(ef, e),
  ptr_points_to_choice(ef, a).

unify_ptr(ef, a) :-
  alloc_subregion_root(ef, e),
  ptr_points_to_choice(e, a).


// If `f(t* x)`, `f(v)`, and `v -> a`, then `x -> a`.
unify_expr(x, a) :-
  function(f),
  function_param(f, idx, x),
  call_instruction_fn_target(instr, f),
  call_instruction_arg(instr, idx, v),
  expr_points_to_choice(v, a).

// If `return u` in `f` and `u -> a`, then `f(z) -> a`.
// also need to do assigns_to, so that not only expr, but also vars are unified.
unify_expr(to_var, a) :-
// .decl A(u:Operand)
// .output A(IO=stdout)
// A(u) :-
  // function(f),
  instruction_in_function(ret_instr, f),
  call_instruction_fn_target(call_instr, f),
  ret_instruction_value(ret_instr, u),
  instruction_assigns_to(call_instr, to_var),
  expr_points_to_choice(u, a).

// This rule is buggy, according to Langston's blog post
// expr_points_to_choice(e, r) :-
//   unify_expr(e, a),
//   unify(r, a).

.decl is_repr(repr: Allocation)
is_repr(repr) :-
  unify(repr, _),
  0 = count : {
    unify(other, repr),
    other != repr
  }.

.decl expr_points_to_final(e: Operand, a: Allocation)
expr_points_to_final(e, r) :-
  expr_points_to_choice(e, a),
  unify(r, a),
  is_repr(r).

.decl ptr_points_to_final(a: Allocation, b: Allocation)
ptr_points_to_final(a, r) :-
  ptr_points_to_choice(a, b),
  unify(r, b),
  is_repr(r).

.printsize expr_points_to_choice
.printsize expr_points_to_final