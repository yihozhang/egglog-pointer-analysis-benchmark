
;; functions
(relation function_name (String))
(input function_name "function.csv")
(relation function_nparams (String i64))
(input function_nparams "function_nparams.csv")
(relation function_param (String i64 String))
(input function_param "function_param.csv")
(relation instruction_in_function (String String))
(input instruction_in_function "instruction_in_function.csv")

;; instructions
(relation instruction_assigns_to (String String))
(input instruction_assigns_to "instruction_assigns_to.csv")
(relation assign_instruction (String String))
(input assign_instruction "assign_instruction.csv")
(relation load_instruction (String))
(input load_instruction "load_instruction.csv")
(relation load_instruction_address (String String))
(input load_instruction_address "load_instruction_address.csv")
(relation store_instruction_value (String String))
(input store_instruction_value "store_instruction_value.csv")
(relation store_instruction_address (String String))
(input store_instruction_address "store_instruction_address.csv")

(relation call_instruction_arg (String i64 String))
(input call_instruction_arg "call_instruction_arg.csv")
(relation call_instruction_fn_target (String String))
(input call_instruction_fn_target "call_instruction_fn_target.csv")

(relation ret_instruction (String))
(input ret_instruction "ret_instruction.csv")
(relation ret_instruction_value (String String))
(input ret_instruction_value "ret_instruction_value.csv")

(relation constant_points_to (String String))
(input constant_points_to "constant_points_to.csv")
(relation constant_ptr_points_to (String String))
(input constant_ptr_points_to "constant_ptr_points_to.csv")
(relation allocation_by_instruction (String String))
(input allocation_by_instruction "allocation_by_instruction.csv")
(relation getelementptr_instruction_base (String String))
(input getelementptr_instruction_base "getelementptr_instruction_base.csv")

;; Analyses beyond basic
(relation RAW_alloc_subregion_at_path (String String String))
(input RAW_alloc_subregion_at_path "alloc_subregion_at_path.csv")
(relation alloc_aliases (String String))
(input alloc_aliases "alloc_aliases.csv")
(relation gep_var_points_to (String String))
(input gep_var_points_to "gep_var_points_to.csv")
(relation allocation (String))
(input allocation "allocation.csv")
(relation RAW_alloc_matches (String String))
(input RAW_alloc_matches "alloc_matches.csv")

(datatype Allocation (A String))

(function expr_points_to (String) Allocation)
(function ptr_points_to (Allocation) Allocation)

;; populate allocations
(rule (
    (allocation alloc)
)(
    (A alloc)
))

(relation alloc_matches (Allocation Allocation))
(rule (
    (RAW_alloc_matches lessGenericAlloc alloc)
)(
    (alloc_matches (A lessGenericAlloc) (A alloc))
))

;; gep
(rule (
    (gep_var_points_to e a)
)(
    (union (expr_points_to e) (A a))
))

;; constant
(rule (
    (constant_points_to e a)
)(
    (union (expr_points_to e) (A a))
))

;; constant_ptr
(rule (
    (constant_ptr_points_to a b)
)(
    (union (ptr_points_to (A a)) (A b))
))

;; alloc
(rule (
    (allocation_by_instruction i a)
    (instruction_assigns_to i v)
)(
    (union (expr_points_to v) (A a))
))

;; assign
(rule (
    (assign_instruction v e)
    (= (expr_points_to e) a)
)(
    (union (expr_points_to v) a)
))

;; load
(rule (
    (load_instruction_address i u)
    (instruction_assigns_to i e)
    (= (expr_points_to u) a)
    (= (ptr_points_to a) b)
)(
    (union (expr_points_to e) b)
))

(rule (
    (load_instruction_address i u)
    (instruction_assigns_to i e)
    (= (expr_points_to u) baseAlloc)
    (alloc_matches lessGenericAlloc baseAlloc)
    (= (ptr_points_to lessGenericAlloc) b)
)(
    (union (expr_points_to e) b)
))


;; store
(rule (
    (store_instruction_address i v)
    (store_instruction_value i u)
    (= (expr_points_to v) a)
    (= (expr_points_to u) b)
)(
    (union (ptr_points_to a) b)
))

;; (rule (
;;     (getelementptr_instruction_base i e)
;;     (instruction_assigns_to i v)
;;     (= (expr_points_to v) a)
;; )(
;;     (union (expr_points_to e) a)
;; ))

;; (rule (
;;     (getelementptr_instruction_base i e)
;;     (instruction_assigns_to i v)
;;     (= (expr_points_to e) a)
;; )(
;;     (union (expr_points_to v) a)
;; ))

;; If `f(t* x)`, `f(v)`, and `v -> a`, then `x -> a`.
(rule (
    (function_name f)
    (function_param f idx x)
    (call_instruction_fn_target instr f)
    (call_instruction_arg instr idx v)
    (= (expr_points_to v) a)
)(
    (union (expr_points_to x) a)
))

;; If `return u` in `f` and `u -> a`, then `f(z) -> a`.
;; also need to do assigns_to, so that not only expr, but also vars are unified.
(rule (
    (instruction_in_function ret_instr f)
    (call_instruction_fn_target call_instr f)
    (ret_instruction_value ret_instr u)
    (instruction_assigns_to call_instr to_var)
    (= (expr_points_to u) a)
)(
    (union (expr_points_to to_var) a)
))

(function alloc_subregion_at_path (Allocation String) Allocation)
;; this rule subsumes the two rules with unify0
(rule (
    (RAW_alloc_subregion_at_path alloc path subAlloc)
)(
    (union (alloc_subregion_at_path (A alloc) path) (A subAlloc))
))
;; this rule subsumes the rule with alloc_aliases
(rule (
    (alloc_aliases alloc1 alloc2)
)(
    (union (A alloc1) (A alloc2))
))

(run 100000)

(print-size expr_points_to)
(print-size ptr_points_to)
